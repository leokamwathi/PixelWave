[gd_scene load_steps=9 format=2]

[ext_resource path="res://assets/32x32_white.png" type="Texture" id=1]
[ext_resource path="res://assets/squares/32x32_gray.png" type="Texture" id=2]
[ext_resource path="res://src/shaders/lightning.shader" type="Shader" id=3]


[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Gonkee's Mandelbrot zoom shader for Godot 3 - full tutorial https://youtu.be/kv3uGJq12fc

// in vec2's representing complex numbers,
// x is the real component and y is the imaginary component

vec2 complex_square(vec2 num) {
	float real = num.x * num.x - num.y * num.y;
	float imag = 2.0 * num.x * num.y;
	return vec2(real, imag);
}

vec2 mandelbrot(vec2 z, vec2 c) {
	return complex_square(z) + c;
}

void fragment() {
	
	int iterations = 200;
	vec2 z = vec2(0.0, 0.0);
	float z_mag = 0.0;
	
	vec2 c = UV - 0.5;
	c.y *= -1.0;
	c /= pow(1.5, TIME - 3.0);
	c.y += 0.1;
	c.x -= sqrt( 0.755 * 0.755 - 0.1 * 0.1 );
	
	float iterations_used = 0.0;
	
	for (int i = 0; i < iterations; i++) {
		z = mandelbrot(z, c);
		z_mag = sqrt(z.x * z.x + z.y * z.y);
		iterations_used++;
		
		if (z_mag >= 2.0) {
			break;
		}
	}
	
	COLOR = vec4(vec3(1.0 - iterations_used / float(iterations)), 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Gonkee's fire shader for Godot 3 - full tutorial https://youtu.be/CI3JZ-3cabg
// If you use this shader, I would prefer it if you gave credit to me and my channel

uniform vec4 transparent : hint_color;
uniform vec4 inner : hint_color;
uniform vec4 outer : hint_color;

uniform float inner_threshold = 0.4;
uniform float outer_threshold = 0.15;
uniform float soft_edge = 0.04;

uniform vec2 center = vec2(0.5, 0.8);

uniform int OCTAVES = 6;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

float overlay(float base, float top) {
	if (base < 0.5) {
		return 2.0 * base * top;
	} else {
		return 1.0 - 2.0 * (1.0 - base) * (1.0 - top);
	}
}

float egg_shape(vec2 coord, float radius){
	vec2 diff = abs(coord - center);

	if (coord.y < center.y){
		diff.y /= 2.0;
	} else {
		diff.y *= 2.0;
	}

	float dist = sqrt(diff.x * diff.x + diff.y * diff.y) / radius;
	float value = sqrt(1.0 - dist * dist);
	return clamp(value, 0.0, 1.0);
}

void fragment() {
	vec2 coord = UV * 8.0;
	vec2 fbmcoord = coord / 6.0;

	float egg_s = egg_shape(UV, 0.4);
	egg_s += egg_shape(UV, 0.2) / 2.0;

	float noise1 = noise(coord + vec2(TIME * 0.25, TIME * 4.0));
	float noise2 = noise(coord + vec2(TIME * 0.5, TIME * 7.0));
	float combined_noise = (noise1 + noise2) / 2.0;

	float fbm_noise = fbm(fbmcoord + vec2(0.0, TIME * 3.0));
	fbm_noise = overlay(fbm_noise, UV.y);

	float everything_combined = combined_noise * fbm_noise * egg_s;

	if (everything_combined < outer_threshold){
		COLOR = transparent;
	} else if (everything_combined < outer_threshold + soft_edge){
		COLOR = mix(transparent, outer, (everything_combined - outer_threshold) / soft_edge);
	} else if (everything_combined < inner_threshold){
		COLOR = outer;
	} else if (everything_combined < inner_threshold + soft_edge){
		COLOR = mix(outer, inner, (everything_combined - inner_threshold) / soft_edge);
	} else {
		COLOR = inner;
	}

	COLOR = vec4(vec3(everything_combined), 1.0);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/transparent = null
shader_param/inner = null
shader_param/outer = null
shader_param/inner_threshold = 0.4
shader_param/outer_threshold = 0.15
shader_param/soft_edge = 0.04
shader_param/center = Vector2( 0.5, 0.8 )
shader_param/OCTAVES = 6

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 3 )
shader_param/F3 = 0.333333
shader_param/G3 = 0.166667

[node name="Node2D" type="Node2D"]

[node name="32x32_white" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 661.123, 395.845 )
scale = Vector2( 1.3555, 1.41586 )
texture = ExtResource( 1 )

[node name="FireShader" type="Sprite" parent="."]
visible = false
modulate = Color( 0.988235, 0.858824, 0.0156863, 1 )
material = SubResource( 4 )
position = Vector2( 702.005, 394.132 )
scale = Vector2( 1.09146, 1.26133 )
texture = ExtResource( 2 )

[node name="Lightning" type="TextureRect" parent="."]
material = SubResource( 6 )
margin_left = 567.0
margin_top = 367.0
margin_right = 754.0
margin_bottom = 389.0
texture = ExtResource( 2 )
expand = true
